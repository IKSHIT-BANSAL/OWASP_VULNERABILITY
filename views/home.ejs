<html>
    <head>
        <title>
            <%= title %>
        </title>
        <link rel="stylesheet" href="/css/homeStyle.css">
    </head>
    <body>
        <header id="header">
            <%-include('_header'); %>
        </header>

        <main id="layout-main">
            <div id="table">
                <h1>name password</h1>
                <% for(let i=0;i<user.length;i++){ %>
                    
                    <%= user[i].name %>
                    
                    <%= user[i].password %>
                    <br>
                <% } %> 
            </div>
            <div id="detail">
                <h1>
                    Sql Injection Vulnerability 
                </h1>
                <p>
    Injection is an attacker’s attempt to send data to an application in a way that will change the meaning 
    of commands being sent to an interpreter. For example, the most common example is SQL
      injection, where an attacker sends “101 OR 1=1” instead of just “101”.Here untrusted data is sent to 
      an interpreter as a part of command or query. Here the untrusted data is sent as a part of query and 
      on executing statements leads to improper authorization.
Common injections are SQL, NoSQL, OS commands.
This attack can lead to data loss, corruption or disclosure to unauthorized parties and denial of access.
Types of SQL injection- CRLF injection=Injects an unpredicted CRLF (Carriage Return and Line Feed) character 
sequence that splits the HTTP response header and writes 
random contents to the response body, also consisting Cross-site Scripting (XSS). 
Damages via cross-site scripting (XSS) Email (Mail command/SMTP) injection=Injects IMAP/SMTP 
statements to the mail server that is not directly accessible through web application. Spam relay & 
Information disclosure 
Code injection=Injects the application code which executes operating system commands from the system user’s 
access. Advanced attacks can use privileged escalation weaknesses to acquire even higher privileges like
 admin. SQL injection (SQLi) = Injects SQL 
commands, which can read, write, or modify data from a database. Advanced deviations of this attack can be 
writing arbitrary files onto the server and also executing OS commands which can compromise the complete 
system. 
Information disclosure, Data loss and theft, Authentication bypass, 


Denial of service, Loss of data integrity, and Full system compromise. OS Command injection=Targets operating system commands by gaining illegal accesses to various systems.
When you hear about Injection attacks, the one you might think of first is SQL injection. SQL injection has been around for almost 20 years and is still a big issue for many web applications. A study done in 2012 by Imperva 
observed that average web applications get at least 4 SQL injection attacks per month.

Most commonly known as an attack vector for web applications, SQL injection can also be used to attack any 
application using SQL databases. Like Injection attacks in general, SQL injection is done by injecting code
 (via text) into data-driven applications. The goal of these attacks is to inject SQL statements and have
  them executed for the purpose of dumping the database contents, deleting data, and more.
<br>
  <strong>Parametized</strong>
 SQL queries
Parameterize SQL queries is an even better way to secure your application. Instead of building a SQL 
statement using concatenation, we let a function replace the parameters within the statement and perform 
sanitation. Here is what our example would look like using this method. Please note this is a bit pseudo 
code but helps get the point across.
<br>
<strong>Esacping User Inputs</strong>
Escape user input
In this example, we are using the mysql npm package. It offers functionality to properly escape 
user input which we can use to lock down our application. Many other libraries out there offer 
this type of functionality or you can find libraries solely for escaping user input. Here is our 
previous example now escaping user input.

<br>
<br>
<strong>Prevention</strong>: 
<ul>
    <li>
        Avoid dynamic SQL queries at all costs and use parameterized queries instead. Parameterized queries are prepared statements that enable you to effectively and robustly mitigate Blind SQL Injections.
    </li>
    <li>
        Developer should use parameterized queries while coding to prevent injection flaws. Parameterized queries do proper substitution of arguments prior to running the SQL query. It completely removes the possibility of "dirty" input changing the meaning of your query. That is, if the input contains SQL, it can't become part of what is executed because the SQL is never injected into the resulting statement.
    </li>
    <li>
        Use a safe API which avoids of use of interpreter entirely
    </li>
    <li>
        Perform proper input validation with appropriate checks but it has a flaw that many application require special characters in input.
    </li>
</ul>               
<br>
  
    <p id="example">
        <strong>Example of SQL injection</strong>
        There is an HQL (Hibernate query language)
        Query HQLQuery = session.createQuery ("FROM accounts WHERE custID='" + request.getParameter ("id") + "'");
    Now attacker can modify id parameter as ‘1’ or ‘1.
    Like a website http://commonSet.com/app/id=’ or ‘1’=’1
    This will result in change in id and an unauthorized access can be done by an attacker.
    </p>

</p>
            </div>
        </main>
    </body>
</html>