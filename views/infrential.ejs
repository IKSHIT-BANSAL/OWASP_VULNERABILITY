<html>
    <head>
        <title>
            <%= title %>
        </title>
    </head>
    <body>
        <h1>Inferential SQL injection</h1>
        <p>
            Inferential SQL injection, unlike in-band SQLi, may take longer for an attacker to exploit,
            however, it is just as dangerous as any other form of SQL injection. In an inferential SQLi 
            attack, no data is actually transferred via the web application and the attacker would not be
            able to see the result of an attack in-band (which is why such attacks are commonly referred
            to as “blind SQL injection attacks”). Instead, an attacker is able to reconstruct the database
            structure by sending payloads, observing the web application’s response and the resulting
            behavior of the database server.
            <br>
            There are 2 types of Infrential sql Injection: <br>
            <ol>
                <li>
                    Blind-boolean-based SQLi
                </li>
                <li>
                    Blind-time-based SQLi.
                </li>
            </ol>
            <h3>1. <u>Boolean-Based (Content-Based) Blind SQLi</u></h3>
            <br>
            Boolean-based SQL injection is an inferential SQL injection technique that relies on sending a 
            SQL query to the database which forces the application to return
             a different result depending on whether the query returns a TRUE or FALSE result.
             <br>
             Depending on the result, the content within the HTTP response will change, or remain the same. 
             This allows an attacker to infer if the payload used returned true or false, even though no data from the database is returned. This attack is typically slow (especially on large databases) 
             since an attacker would need to enumerate a database, character by character.
             <br>
             The only way to extract data that is in the current database, would be using brute force, ie guessing.
             There are some ways to check if the website we have in hand is vulnerable to a SQLi Boolean Based Blind,
              we can use the “AND” statement, then some operation, which results in a value true or false (boolean), 
              true or false, for example, 
             we can use AND 1 = 1, which would be equal to True / True, since 1 equals 1 : D.
             And if we put it, and 1 = 0, it should give me a false / false result, since 1 is not equal to 0.

             <br>
             <h3>
                 2. <u>Time Based SQLi</u>
             </h3>
             Time-based SQL injection is an inferential SQL injection technique that relies on sending a 
             SQL query to the database which forces the database to wait for a specified amount of time 
             (in seconds) before responding. The response time will indicate to the attacker whether the 
             result of the query is TRUE or FALSE.
             Depending on the result, an HTTP response will be returned with a delay or returned immediately.
            This allows an attacker to infer if the payload used returned true or false, even though no data
            from the database is returned. This attack is typically slow (especially on large databases) 
            since an attacker would need to enumerate a database character by character.
            Using this method, an attacker enumerates each letter of the desired piece of data using the following logic:
             <br>
            If the first letter of the first database’s name is an ‘A’, wait for 10 seconds.
             <br>
            If the first letter of the first database’s name is an ‘B’, wait for 10 seconds. etc.
            <br>
            <b>SELECT IF(expression, true, false)</b><br>
            Using some time-taking operation e.g. BENCHMARK(), will delay server responses if the expression is True.
            <br>
            <b>BENCHMARK(5000000,ENCODE('MSG','by 5 seconds'))</b><br>
            will execute the ENCODE function 5000000 times.
            Depending on the database server’s performance and load, it should take just a moment to
             finish this operation. The important thing is, from the attacker’s point of view, to 
             specify a high-enough number of BENCHMARK() 
            function repetitions to affect the database response time in a noticeable way.
            Using this method for the rest of characters, it’s possible to enumerate entire passwords
             stored in the database. This method works even when the attacker injects the SQL queries 
             and the content of the vulnerable page doesn’t change.
             Obviously, in this example, the names of the tables and the number of columns was specified. 
             However, it’s possible to guess them or check with a trial and 
            error method.

        </p>
    </body>
</html>