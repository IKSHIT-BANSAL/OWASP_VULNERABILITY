<html>
    <head>
        <title>
            <%= title %>
        </title>
    </head>
    <body>
        <h1>In band SQL Injection</h1>
        <p>
            In-band SQL injection is the most common and easy-to-exploit of the SQL injection attacks. 
            In-band SQL injection occurs when an attacker is able to use the same communication channel 
            to both launch the attack and gather results.
            <br>
            There are 2 types of In-band Sql injection
            <ol>
                <li>
                    Error based SQLi
                </li>
                <li>
                    Union based SQLi
                </li>
            </ol>

            <h3>1.<u>Error based SQLi </h3></u>
            <br>
            Error-based SQLi is an in-band SQL injection technique that relies on error messages thrown 
            by the database server to obtain information about the structure of the database. In some cases,
            error-based SQL injection alone is enough for an attacker to enumerate an entire database.
            While errors are very useful during the development phase of a web application, they should 
            be disabled on a live site or logged to a file with restricted access instead.
            <br>
            It relies on feeding unexpected commands or invalid input, typically through a user 
            interface, to cause the database server to reply with an error that may contain details 
            about the target: structure, version, operating system, and even to return full query results.
            Error based SQL injection a technique where the attacker determines system vulnerabilities by purposefully
            causing your database to throw errors onto the user interface. Through analyzing 
            these errors the attacker learns system information such as the database, database version, OS, etc
            Let us say The SQL query used by the application is:
                <br>
            <b>SELECT first_name, last_name FROM users WHERE user_id = '$id';  </b>
            <br>
            The server accepts the input from the user and returns the associated values, 
            indicating that an attacker can use malicious input to modify the backend query. 
            Typing 5', the backend responds with an error due to the single quote.
            The input from the user modifies the backend query, which becomes:
                <br>
            <b>SELECT first_name, last_name FROM users WHERE user_id = '5'';</b>
            Exploiting error-based SQL Injection relies on the fact that the injected SQL query 
            will output the results into the error message returned by the database.

            <br><br>
            <h3> 2. <u>Union Based SQLi</u></h3>
            <br>
            Union-based SQLi is an in-band SQL injection technique that leverages the UNION SQL 
            operator to combine the results of two or more SELECT statements into a single result 
            which is then returned as part of the HTTP response.
            It fuses multiple select statements generated by the database to get a single HTTP response. 
            This response may contain data that can be leveraged by the attacker.
            The UNION keyword lets you execute one or more additional SELECT queries and append the results to the original query.
             For example: <br>
             <b>SELECT a, b FROM table1 UNION SELECT c, d FROM table2</b><br>
             This SQL query will return a single result set with two columns, containing values from columns a and b in table1 and
              columns c and d in table2. <br>
              <b>Number of Columns</b> <br>
              There is basically 2 ways to find how many columns are selected by the original query. 
              The first one is to inject an ORDER BY clause indicating a column number. Given the column
               number specified is greater than the number of columns in the SELECT statement, an error 
               will be returned. Otherwise, the results will be sorted by the column mentioned. Letâ€™s see 
               both cases.  <br>
               QUERY GENERATED (SELECTS ONLY 3 COLUMNS).

        <b>SELECT name, description, price FROM products WHERE category=1 ORDER BY 2 </b><br>
        If output is The data returned is sorted by description.
        We know that the select statement has at least 2 columns. To find the exact number of columns, the number is 
        incremented until an error related to the ORDER BY clause is returned.
        <br>
        now this command is run <br>
        <b>SELECT name, description, price FROM products WHERE id=1 ORDER BY 4</b> <br>
        If output is ORDER BY item must be the number of a SELECT-list expression.
        We can now conclude that the original query has 3 columns.
        <br>
        


        </p>
    </body>
</html>